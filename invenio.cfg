"""
InvenioRDM settings for Baobab project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from invenio_i18n import lazy_gettext as _


def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://baobab:baobab@localhost/baobab"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Name used in header and UI
THEME_SITENAME = "Baobab"
# Frontpage title
THEME_FRONTPAGE_TITLE = "Baobab"
# Header logo
THEME_LOGO = 'images/bao.png'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "Baobab",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

PIDSLINK_ENABLED = True
PIDSLINK_USERNAME = "WACRENtest"
PIDSLINK_PASSWORD = "user@W103!"
PIDSLINK_PREFIX = ""
PIDSLINK_TEST_MODE = True

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

SECURITY_LOGIN_WITHOUT_CONFIRMATION = (
 True  # require users to confirm email before being able to login
)

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "baobab.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "baobab-"

# Invenio-Users-Resources
# -----------------------

SECURITY_EMAIL_SENDER = "keziah.okyere@wacren.net"
MAIL_SERVER = "mx1.wacren.net"
MAIL_USERNAME = "keziah.okyere@wacren.net"
MAIL_USE_SSL = False
MAIL_PORT = 587
SECURITY_EMAIL_SUBJECT_PASSWORD_RESET = "Reset your password for Baobab"
"""Email subject for account registration emails."""

MAIL_SUPPRESS_SEND = False

USERS_RESOURCES_ADMINISTRATION_ENABLED = True
"""Enable the user administration"""

THEME_SHOW_FRONTPAGE_INTRO_SECTION = False
FLASK_ENV= "development"
LOGGING_CONSOLE_LEVEL = "DEBUG"

COMMUNITIES_ADMINISTRATION_DISABLED = False

RDM_NAMESPACES = {
    # CodeMeta
    "code": "https://codemeta.github.io/terms/",
    # CERN
    "cern": "https://greybook.cern.ch/",
}

from invenio_rdm_records.config import RDM_FACETS, RDM_SEARCH
from invenio_records_resources.services.custom_fields import TextCF
from invenio_records_resources.services.records.facets import CFTermsFacet
from invenio_vocabularies.services.custom_fields import VocabularyCF
from marshmallow import validate
from marshmallow_utils.fields import SanitizedHTML



RDM_CUSTOM_FIELDS = [

    # TextCF(
    #      name="cern:experiment_type",
    #      field_args={
    #          "validate": validate.Length(min=1),
    #          "required": True,
    #          "error_messages": {
    #              "required": "You must provide the type of resource. "
    #          }
    #      },
    #      multiple=False,
    #  ),
    
    TextCF(
        name="url",
        # field_args={
        #     "validate": validate.URL(),
        #     "required": True,
        #     "error_messages": {
        #     "required": "You must provide the experiment homepage URL. "
        #     }
        # },
        # multiple=False,
    ),

    TextCF( 
        name="cern:experiment_course",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the name of the course. "
        #     }
        # },
        # multiple=False,
    ),

    TextCF(
        name="cern:experiment_field",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the field of study to the resource. "
        #     }
        # },
        # multiple=False,
    ),
    TextCF(
        name="cern:experiment_public",
        # field_args={
        #     "validate": validate.Length(min=1, max=255),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the access level of the resource. "
        #     }
        # },
        # multiple=False,
    ),

    TextCF(
        name="cern:experiment_grade",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the grade level of the resource. "
        #     }
        # },
        # multiple=False,
    ),
    TextCF(
        name="cern:experiment_research",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the research unit related to the resource. "
        #     }
        # },
        # multiple=False,
    ),

    TextCF(
        name="cern:experiment_validate",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the validity period of the course. "
        #     }
        # },
        # multiple=False,
    ),
    TextCF(
        name="cern:experiment_resource",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the institution responsible for creating the resource. "
        #     }
        # },
        # multiple=False,
    ),

]

RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Open Educational Resources (OER)"),
        "fields": [
            # dict(
            #      field="cern:experiment_type",
            #      ui_widget="Dropdown",
            #      props=dict(
            #          label="Type of Educational Material",
            #          placeholder="Type",
            #          icon="image",
            #          description="The type of resource (e.g., textbook, lecture, quiz).",
            #          search=True,  # True for autocomplete dropdowns with search functionality
            #          multiple=True,   # True for selecting multiple values
            #          clearable=True,
            #          required=True,
            #          options=[
            #                 {'label': 'Textbook', 'value': 'textbook'},
            #                 {'label': 'Lecture', 'value': 'lecture'},
            #                 {'label': 'Quiz', 'value': 'quiz'},
            #                 {'label': 'Assignment', 'value': 'assignment'},
            #                 {'label': 'Project', 'value': 'project'},
            #                 {'label': 'Lab', 'value': 'lab'},
            #                 {'label': 'Tutorial', 'value': 'tutorial'},
            #                 {'label': 'Other', 'value': 'other'},
            #             ]
            #      )
            #  ),
            dict(
                field="cern:experiment_course",
                ui_widget="Input",
                props=dict(
                    label="Course",
                    placeholder="",
                    icon="book",
                    description="The name of the course, typically capturing the main topic or theme",
                )
            ),
            dict(
                field="url",
                ui_widget="Input",
                props=dict(
                    label="URL",
                    placeholder="https://your.experiment.url",
                    icon="linkify",
                    description="The URL where the resource can be accessed.",
                )
            ),
            dict(
                field="cern:experiment_field",
                ui_widget="Input",
                props=dict(
                    label="Discipline or Field",
                    placeholder="",
                    icon="briefcase",
                    description="Field of study related to the resource.",
                )
            ),

            dict(
                field="cern:experiment_grade",
                ui_widget="Input",
                props=dict(
                    label="Grade",
                    placeholder="",
                    icon="star",
                    description="The intended grade level of the resource.",
                )
            ),
            dict(
                field="cern:experiment_public",
                ui_widget="Input",
                props=dict(
                    label="Public",
                    placeholder="",
                    icon="group",
                    description="The intended audience or the access level of the resource.",
                )
                
            ),
            dict(
                field="cern:experiment_resource",
                ui_widget="Input",
                props=dict(
                    label="Institution having submitted the resource",
                    placeholder="",
                    icon="building",
                    description="The Institution responsible for submitting or creating the resource.",
                )
            ),

            dict(
                field="cern:experiment_research",
                ui_widget="Input",
                props=dict(
                    label="Training and Research Unit",
                    placeholder="",
                    icon="building",
                    description="Training and research unit related to the resource.",
                )
            ),
            dict(
                field="cern:experiment_validate",
                ui_widget="Input",
                props=dict(
                    label="Course Validity",
                    placeholder="",
                    icon="hourglass",
                    description="The validity period of the course.",
                )
            ),
            ]
    }
]

RDM_FACETS = {
    **RDM_FACETS,
    "experiment": {
        "facet": CFTermsFacet(  # backend facet
            field="cern:experiment.id",  # id is the keyword field of a vocabulary
            label=_("CERN Experiment"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("cern:experiment.id"),
        },
    },
}

RDM_SEARCH = {
    **RDM_SEARCH,
    "facets": RDM_SEARCH["facets"] + ["experiment"]
}


# from invenio_pidstore.providers.recordid import RecordIdProvider
# from invenio_pidstore.models import PIDStatus

# PIDSTORE_RECID_FIELD = 'pid'

# PIDSTORE_RECID_CONFIG = {
#     'pid_type': 'ark',
#     'minter': 'ark',
#     'provider': 'ark',
#     'status': PIDStatus.REGISTERED,
#     'pattern': 'ark:/12345/<identifier>',
# }

# # Add ARK minter and provider
# PIDSTORE_MINTERS = [
#     'ark',
# ]

# PIDSTORE_PROVIDERS = [
#     'ark',
# ]

# from invenio_i18n import lazy_gettext as _
# import idutils

# RDM_PERSISTENT_IDENTIFIERS = {
#     "doi": {
#         "providers": ["datacite", "external"],
#         "required": False,
#         "label": _("ARK"),
#         "validator": idutils.is_doi,
#         "normalizer": idutils.normalize_doi,
#         "is_enabled": lambda _: True,
#     },

#     "ark": {
#         "providers": ["ark"],
#         "required": False,
#         "label": _("ARK"),
#         "is_enabled": lambda _: True,  # Accepts one argument
#     },
# }


from invenio_pidstore.providers.base import BaseProvider

class ARKProvider(BaseProvider):
    pid_type = "ark"
    pid_provider = "ark"
    
    def generate_id(self, **kwargs):
        # Implement a custom ID generation method if necessary.
        # This could use a third-party service or custom logic.
        return "your-ark-id"  # Replace with real ARK ID generation logic.

# Add the ARK provider to the list of PID providers
PIDS_PROVIDERS = {
    'ark': {
        'default': ARKProvider,
        # 'client': 'your-client',  # Optional, if you're using a client-based ARK provider.
    }
}

PIDSTORE_RECID_FIELD = "ark"
PIDSTORE_RECID_SCHEMES = {
    "ark": {
        "label": "ARK",
        "class": ARKProvider,
    }
}
