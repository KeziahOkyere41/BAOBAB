"""
InvenioRDM settings for Baobab project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from invenio_i18n import lazy_gettext as _


def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://baobab:baobab@localhost/baobab"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
     ('de', _('German')),
     ('fr', _('French')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Name used in header and UI
THEME_SITENAME = "BAOBAB"
# Frontpage title
THEME_FRONTPAGE_TITLE = "BAOBAB"
# Header logo
THEME_LOGO = 'images/bao.png'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "BAOBAB",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

PIDSLINK_ENABLED = True
PIDSLINK_USERNAME = "WACRENtest"
PIDSLINK_PASSWORD = "user@W103!"
PIDSLINK_PREFIX = ""
PIDSLINK_TEST_MODE = True

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

SECURITY_LOGIN_WITHOUT_CONFIRMATION = (
 True  # require users to confirm email before being able to login
)

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "baobab.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "baobab-"

# Invenio-Users-Resources
# -----------------------

SECURITY_EMAIL_SENDER = "kewoyaa@gmail.com"
MAIL_SERVER = "mx2.wacren.net"
MAIL_USE_TLS = True
MAIL_USE_SSL = False
MAIL_PORT = 587
SECURITY_EMAIL_SUBJECT_PASSWORD_RESET = "Reset your password for Baobab"
"""Email subject for account registration emails."""

MAIL_SUPPRESS_SEND = False

USERS_RESOURCES_ADMINISTRATION_ENABLED = True
"""Enable the user administration"""

THEME_SHOW_FRONTPAGE_INTRO_SECTION = False
FLASK_ENV= "development"
LOGGING_CONSOLE_LEVEL = "DEBUG"

COMMUNITIES_ADMINISTRATION_DISABLED = False

RDM_NAMESPACES = {
    # CodeMeta
    "code": "https://codemeta.github.io/terms/",
    # CERN
    "cern": "https://greybook.cern.ch/",
}

from invenio_rdm_records.config import RDM_FACETS, RDM_SEARCH
from invenio_records_resources.services.custom_fields import TextCF
from invenio_records_resources.services.records.facets import CFTermsFacet
from invenio_vocabularies.services.custom_fields import VocabularyCF
from marshmallow import validate
from marshmallow_utils.fields import SanitizedHTML



RDM_CUSTOM_FIELDS = [
    
    TextCF(
        name="url",
    ),

    TextCF( 
        name="cern:experiment_course",
        # field_args={
        #     "validate": validate.Length(min=1),
        #     "required": True,
        #     "error_messages": {
        #         "required": "You must provide the name of the course. "
        #     }
        # },
        # multiple=False,
    ),

    TextCF(
        name="cern:experiment_field",
    ),
    TextCF(
        name="cern:experiment_public",
    ),

    TextCF(
        name="cern:experiment_grade",
    ),
    TextCF(
        name="cern:experiment_research",
    ),

    TextCF(
        name="cern:experiment_validate",
    ),
    TextCF(
        name="cern:experiment_resource",
    ),

]

RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Open Educational Resources (OER)"),
        "fields": [
            dict(
                field="cern:experiment_course",
                ui_widget="Input",
                props=dict(
                    label="Course",
                    placeholder="",
                    icon="book",
                    description="The name of the course, typically capturing the main topic or theme",
                )
            ),
            dict(
                field="url",
                ui_widget="Input",
                props=dict(
                    label="URL",
                    placeholder="https://your.experiment.url",
                    icon="linkify",
                    description="The URL where the resource can be accessed.",
                )
            ),
            dict(
                field="cern:experiment_field",
                ui_widget="Input",
                props=dict(
                    label="Discipline or Field",
                    placeholder="",
                    icon="briefcase",
                    description="Field of study related to the resource.",
                )
            ),

            dict(
                field="cern:experiment_grade",
                ui_widget="Input",
                props=dict(
                    label="Grade",
                    placeholder="",
                    icon="star",
                    description="The intended grade level of the resource.",
                )
            ),
            dict(
                field="cern:experiment_public",
                ui_widget="Input",
                props=dict(
                    label="Public",
                    placeholder="",
                    icon="group",
                    description="The intended audience or the access level of the resource.",
                )
                
            ),
            dict(
                field="cern:experiment_resource",
                ui_widget="Input",
                props=dict(
                    label="Institution having submitted the resource",
                    placeholder="",
                    icon="building",
                    description="The Institution responsible for submitting or creating the resource.",
                )
            ),

            dict(
                field="cern:experiment_research",
                ui_widget="Input",
                props=dict(
                    label="Training and Research Unit",
                    placeholder="",
                    icon="building",
                    description="Training and research unit related to the resource.",
                )
            ),
            dict(
                field="cern:experiment_validate",
                ui_widget="Input",
                props=dict(
                    label="Course Validity",
                    placeholder="",
                    icon="hourglass",
                    description="The validity period of the course.",
                )
            ),
            ]
    }
]

RDM_FACETS = {
    **RDM_FACETS,
    "experiment": {
        "facet": CFTermsFacet(  # backend facet
            field="cern:experiment.id",  # id is the keyword field of a vocabulary
            label=_("CERN Experiment"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("cern:experiment.id"),
        },
    },
}

RDM_SEARCH = {
    **RDM_SEARCH,
    "facets": RDM_SEARCH["facets"] + ["experiment"]
}


from invenio_i18n import lazy_gettext as _
import idutils

RDM_PERSISTENT_IDENTIFIERS = {

    "ark": {
        "providers": ["ark"],
        "required": False,
        "label": _("ARK"),
        "is_enabled": lambda _: True,  # Accepts one argument
    },
}


# Register pages
APP_RDM_PAGES = {
    "about": "/about",
    "contact": "/contact",
    "faq": "/faq",
}

# SAML Integration

from invenio_saml.handlers import acs_handler_factory

SSO_SAML_DEFAULT_BLUEPRINT_PREFIX = '/saml'
"""Base URL for the extensions endpoint."""

SSO_SAML_DEFAULT_METADATA_ROUTE = '/metadata/<idp>'
"""URL route for the metadata request."""

SSO_SAML_DEFAULT_SSO_ROUTE = '/login/<idp>'
"""URL route for the SP login."""

SSO_SAML_DEFAULT_ACS_ROUTE = '/authorized/<idp>'
"""URL route to handle the IdP login request."""

SSO_SAML_DEFAULT_SLO_ROUTE = '/slo/<idp>'
"""URL route for the SP logout."""

SSO_SAML_DEFAULT_SLS_ROUTE = '/sls/<idp>'
"""URL route to handle the IdP logout request."""

SSO_SAML_IDPS = {
    # name your authentication provider
    'baobab': {
        # Basic info
        "title": "WACREN eduID Federation",
        "description": "WACREN eduID Federation",
        "icon": "http://wacren.eduid.africa/logo.png",
        # path to the file i.e. "./saml/sp.crt"
        'sp_cert_file': './saml/baobab-sp.crt',

        # path to the file i.e. "./saml/sp.key"
        'sp_key_file': './saml/baobab-sp.key',

        'settings': {
            # If strict is True, then the Python Toolkit will reject unsigned
            # or unencrypted messages if it expects them to be signed or encrypted.
            # Also it will reject the messages if the SAML standard is not strictly
            # followed. Destination, NameId, Conditions ... are validated too.
            'strict': True,

            # Enable debug mode (outputs errors).
            'debug': True,

            # Service Provider Data that we are deploying.
            'sp': {
                # Specifies the constraints on the name identifier to be used to
                # represent the requested subject.
                # Take a look on https://github.com/onelogin/python-saml/blob/master/src/onelogin/saml2/constants.py
                # to see the NameIdFormat that are supported.
                'NameIDFormat': 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient',
            },

            # Identity Provider Data that we want connected with our SP.
            'idp': {
                # Identifier of the IdP entity  (must be a URI)
                'entityId': 'https://wacrenproxy.eduid.africa/idp/saml2',

                # SSO endpoint info of the IdP. (Authentication Request protocol)
                'singleSignOnService': {
                    # URL Target of the IdP where the Authentication Request Message
                    # will be sent.
                    'url': 'https://ds.wacren.eduid.africa/ds?entityID=https%3A%2F%2Fwacrenproxy.eduid.africa%2Fsp%2Fsaml2&return=https%3A%2F%2Fwacrenproxy.eduid.africa%2Fsp%2Fdisco',

                    # SAML protocol binding to be used when returning the <Response>
                    # message. OneLogin Toolkit supports the HTTP-Redirect binding
                    # only for this endpoint.
                    'binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST'
                },

                # SLO endpoint info of the IdP.
                'singleLogoutService': {
                    # URL Location where the <LogoutRequest> from the IdP will be sent (IdP-initiated logout)
                    'url': 'https://wacrenproxy.eduid.africa/sp/slo/post',

                    # SAML protocol binding to be used when returning the <Response>
                    # message. OneLogin Toolkit supports the HTTP-Redirect binding
                    # only for this endpoint.
                    'binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST'
                },
                # Public X.509 certificate of the IdP
                'x509cert': 'MIIEZzCCA0+gAwIBAgIUQV1ZMAIhJUczF5FoNbPWTUHweFQwDQYJKoZIhvcNAQELBQAwgcIxCzAJBgNVBAYTAkdIMQ4wDAYDVQQIDAVBQ0NSQTEOMAwGA1UEBwwFQUNDUkExQDA+BgNVBAoMN1dlc3QgQW5kIENlbnRyYWwgQWZyaWNhbiBSZXNlYXJjaCBhbmQgRWR1Y2F0aW9uIE5ldHdvcmsxDzANBgNVBAsMBldBQ1JFTjEhMB8GA1UEAwwYd2FjcmVucHJveHkuZWR1aWQuYWZyaWNhMR0wGwYJKoZIhvcNAQkBFg5uc2VAd2FjcmVuLm5ldDAeFw0yMjEyMzExNDIwNDRaFw0zMjEyMjgxNDIwNDRaMIHCMQswCQYDVQQGEwJHSDEOMAwGA1UECAwFQUNDUkExDjAMBgNVBAcMBUFDQ1JBMUAwPgYDVQQKDDdXZXN0IEFuZCBDZW50cmFsIEFmcmljYW4gUmVzZWFyY2ggYW5kIEVkdWNhdGlvbiBOZXR3b3JrMQ8wDQYDVQQLDAZXQUNSRU4xITAfBgNVBAMMGHdhY3JlbnByb3h5LmVkdWlkLmFmcmljYTEdMBsGCSqGSIb3DQEJARYObnNlQHdhY3Jlbi5uZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDazmETY8T9/kamUE0sDgvLYlpNLDUUbii81Q9HloMKrt6/arI5ODB5izUagdrpP8lqqNlDXxAhmxpTGhJU/rQ9GxEWGk/WLK28prYWxUw5o6NSF7AEzQBcTL8NFt3Xz+dSnY6HirOnh1OTX8FDVdtLAUMchc7+Ecxd5OetalTv3exipXGU/xYI20b3aVSL5vLjqmrWUpwjHATjxG1uKqUWMdtObQe8k/eSpWg6ialz40AzoJ84LdTQ2H6fdnt41pKZMYIX1uG8xRcQ8JDfMesOIgUIaBRLcXuEYS1dHhIUiKejsU1uQN+wcXfo7vMwZjgIocpOiPHPSlROQJmf9xw5AgMBAAGjUzBRMB0GA1UdDgQWBBQgrLr5f+6UhJrmtEazdnOkGYCLzjAfBgNVHSMEGDAWgBQgrLr5f+6UhJrmtEazdnOkGYCLzjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAedz1zKX2MWsjImdKJ3PGjjF0RNNczwuc8QPMWDzlfHb+MUnnI0zBbnfMVKUYIESiyaHDh6ruakS645n2iPs5X3pZ8ENcWapdvAb0BhtydPUNHqbAXp03i+O07S+K8iaKudpJ/zLdBBeq1Mk2cBXln1rAJXIOOGb69HJZWrN+reFGZm7vgjmSCGYgClozk1xCj8qYBLoP9xY1R0Oz186griJJZengWQkl3dvLaLxChrGdnfq/JiZGyK15LAGKo23OAMm1FIbyqGW5Frmu66ozYREzFphCvgLtFwvtYun4MYGefZAMHtrPgTiwrMXXnc6czi5AT6l898iVgYZZQnH3s'
            },

             # Security settings
             # more on https://github.com/onelogin/python-saml
             'security': {
                 'authnRequestsSigned': False,
                 'failOnAuthnContextMismatch': False,
                 'logoutRequestSigned': False,
                 'logoutResponseSigned': False,
                 'metadataCacheDuration': None,
                 'metadataValidUntil': None,
                 'nameIdEncrypted': False,
                 'requestedAuthnContext': False,
                 'requestedAuthnContextComparison': 'exact',
                 'signMetadata': False,
                 'signatureAlgorithm':
                     'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
                 'wantAssertionsEncrypted': False,
                 'wantAssertionsSigned': False,
                 'wantAttributeStatement': False,
                 'wantMessagesSigned': False,
                 'wantNameId': True,
                 'wantNameIdEncrypted': False,
                 'digestAlgorithm':
                     'http://www.w3.org/2001/04/xmlenc#sha256'
             },
         },

         # Account Mapping
         "mappings": {
             "email": "support@wacren.net",
             "name": "WACREN",
             "surname": "Support",
             "external_id": "support@wacren.net",
         },

         # Inject your remote_app to handler
         # Note: keep in mind the string should match
         # given name for authentication provider
         'acs_handler': acs_handler_factory('baobab'),

         # Automatically set `confirmed_at` for users upon
         # registration, when using the default `acs_handler`
         'auto_confirm': True,
     }
 }

 # Enabling login template

OAUTHCLIENT_LOGIN_USER_TEMPLATE = "invenio_saml/login_user.html"
